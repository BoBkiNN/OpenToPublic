plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'

    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

version = project.mod_version
def semVer = version.split("-")[0]+".0"
group = project.maven_group

println("Fabric mod version: "+version+ " ("+semVer+")")

build.doLast(() -> {
    println "Build output directory: ${project.buildDir}"+"\\libs"
})


repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    implementation files('libs/WaifUPnP.jar')
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
//    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", semVer
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": semVer
    }
    from(replaceText("fabric.mod.json", '$version', semVer))
    outputs.upToDateWhen { false }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar



task fatJar(type: ShadowJar) {
//    dependsOn(jar)
//    from configurations.dependencies.collect
    from files('libs/WaifUPnP.jar').collect {
        zipTree(it)
    }
    from sourceSets.main.output
//    from("LICENSE") {
//        rename { "${it}_${project.archivesBaseName}"}
//    }
//    from(replaceText("fabric.mod.json", "%version%", project.mod_version))

    archiveClassifier = "fat"
    configurations = [project.configurations.include]

    outputs.upToDateWhen { false }
}

// helper function to replace text in a file
def replaceText(String fileName, String targetText, String textToReplace) {
    copy {
        from fileName
        into buildDir
//        rename { "test_replaced.txt" }
        filter { line -> line.replaceAll(targetText, textToReplace) }
    }

    return "${buildDir}/"+fileName
}

jar {
//    dependsOn fatJar
    List<Object> toTree = new ArrayList<>()
    toTree.add('libs/WaifUPnP.jar')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from files(toTree).collect {
        zipTree(it)
    }
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
//    dependsOn fatJar
}
